;; Analyzed by ClojureScript 1.7.228
{:use-macros nil, :excludes #{contains? reverse empty? replace chars repeat}, :name cuerdas.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, gstr goog.string, goog.string goog.string, clojure.set clojure.set, edn cljs.reader, cljs.reader cljs.reader, clojure.walk clojure.walk}, :uses {map-invert clojure.set, stringify-keys clojure.walk}, :defs {lstrip {:name cuerdas.core/lstrip, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 173, :column 1, :end-line 173, :end-column 12, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 173, :column 6, :end-line 173, :end-column 12}}, titleize {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 460, :column 7, :end-line 460, :end-column 15, :arglists (quote ([s] [s delimeters])), :doc "Converts a string into TitleCase.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s delimeters]), :arglists ([s] [s delimeters]), :arglists-meta (nil nil)}}, :name cuerdas.core/titleize, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s delimeters]), :arglists ([s] [s delimeters]), :arglists-meta (nil nil)}, :method-params ([s] [s delimeters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s delimeters]), :doc "Converts a string into TitleCase."}, ends-with? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 75, :column 7, :end-line 75, :end-column 17, :arglists (quote ([s suffix])), :doc "Check if the string ends with suffix."}, :name cuerdas.core/ends-with?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 17, :method-params ([s suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s suffix])), :doc "Check if the string ends with suffix."}, contains? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([s subs])), :doc "Determines whether a string contains a substring."}, :name cuerdas.core/contains?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 16, :method-params ([s subs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s subs])), :doc "Determines whether a string contains a substring."}, collapse-whitespace {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 574, :column 7, :end-line 574, :end-column 26, :arglists (quote ([s])), :doc "Converts all adjacent whitespace characters\n  to a single space."}, :name cuerdas.core/collapse-whitespace, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 26, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts all adjacent whitespace characters\n  to a single space."}, html-escape-chars {:name cuerdas.core/html-escape-chars, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 583, :column 4, :end-line 583, :end-column 26, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 583, :column 9, :end-line 583, :end-column 26}}, capitalize {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 420, :column 7, :end-line 420, :end-column 17, :arglists (quote ([s])), :doc "Converts first letter of the string to uppercase."}, :name cuerdas.core/capitalize, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 420, :end-line 420, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts first letter of the string to uppercase."}, parse-number-impl {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 489, :column 11, :end-line 489, :end-column 28, :private true, :arglists (quote ([source]))}, :private true, :name cuerdas.core/parse-number-impl, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 28, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 489, :end-line 489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source]))}, reverse {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 289, :column 7, :end-line 289, :end-column 14, :arglists (quote ([s])), :doc "Return string reversed."}, :name cuerdas.core/reverse, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return string reversed."}, join {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 357, :column 7, :end-line 357, :end-column 11, :arglists (quote ([coll] [separator coll])), :doc "Joins strings together with given separator.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}}, :name cuerdas.core/join, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([coll] [separator coll]), :arglists ([coll] [separator coll]), :arglists-meta (nil nil)}, :method-params ([coll] [separator coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 2, :fn-var true, :arglists ([coll] [separator coll]), :doc "Joins strings together with given separator."}, numeric? {:name cuerdas.core/numeric?, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 127, :column 1, :end-line 127, :end-column 14, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 127, :column 6, :end-line 127, :end-column 14}, :doc "Checks if a string contains only numeric characters."}, replace-first {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 231, :column 7, :end-line 231, :end-column 20, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, :name cuerdas.core/replace-first, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 20, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, clean {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 657, :column 7, :end-line 657, :end-column 12, :arglists (quote ([s])), :doc "Trim and replace multiple spaces with\n  a single space."}, :name cuerdas.core/clean, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Trim and replace multiple spaces with\n  a single space."}, rtrim {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 149, :column 7, :end-line 149, :end-column 12, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from right side of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/rtrim, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from right side of string."}, startswith? {:name cuerdas.core/startswith?, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 89, :column 1, :end-line 89, :end-column 17, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 89, :column 6, :end-line 89, :end-column 17}}, starts-with? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 63, :column 7, :end-line 63, :end-column 19, :arglists (quote ([s prefix])), :doc "Check if the string starts with prefix."}, :name cuerdas.core/starts-with?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Check if the string starts with prefix."}, ireplace-first {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 239, :column 10, :end-line 239, :end-column 24, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, :name cuerdas.core/ireplace-first, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 24, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 239, :end-line 239, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces first instance of match with replacement in s."}, rstrip {:name cuerdas.core/rstrip, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 172, :column 1, :end-line 172, :end-column 12, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 172, :column 6, :end-line 172, :end-column 12}}, upper {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 98, :column 7, :end-line 98, :end-column 12, :arglists (quote ([s])), :doc "Converts string to all upper-case."}, :name cuerdas.core/upper, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all upper-case."}, classify {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 478, :column 7, :end-line 478, :end-column 15, :arglists (quote ([s])), :doc "Converts string to camelized class name. First letter is always upper case."}, :name cuerdas.core/classify, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to camelized class name. First letter is always upper case."}, format {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 349, :column 7, :end-line 349, :end-column 13, :arglists (quote ([s & more])), :doc "Simple string interpolation.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s more)], :arglists ([s & more]), :arglists-meta (nil)}}, :name cuerdas.core/format, :variadic true, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s more)], :arglists ([s & more]), :arglists-meta (nil)}, :method-params [(s more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 349, :end-line 349, :max-fixed-arity 1, :fn-var true, :arglists ([s & more]), :doc "Simple string interpolation."}, ltrim {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 160, :column 7, :end-line 160, :end-column 12, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from left side of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/ltrim, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from left side of string."}, empty? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 13, :column 7, :end-line 13, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string is empty."}, :name cuerdas.core/empty?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string is empty."}, alpha? {:name cuerdas.core/alpha?, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 123, :column 1, :end-line 123, :end-column 12, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 123, :column 6, :end-line 123, :end-column 12}, :doc "Checks if a string contains only alpha characters."}, ireplace {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 225, :column 10, :end-line 225, :end-column 18, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s."}, :name cuerdas.core/ireplace, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 18, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 225, :end-line 225, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s."}, replace {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 206, :column 7, :end-line 206, :end-column 14, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s.\n  The replacement is literal (i.e. none of its characters are treated\n  specially) for all cases above except pattern / string.\n  In match is pattern instance, replacement can contain $1, $2, etc.\n  will be substituted with string that matcher the corresponding\n  parenthesized group in pattern.\n  If you wish your replacement string to be used literary,\n  use `(escape-regexp replacement)`.\n  Example:\n    (replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n    ;; => \"lmostAay igPay atinLay\"\n  "}, :name cuerdas.core/replace, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :method-params ([s match replacement]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s match replacement])), :doc "Replaces all instance of match with replacement in s.\n  The replacement is literal (i.e. none of its characters are treated\n  specially) for all cases above except pattern / string.\n  In match is pattern instance, replacement can contain $1, $2, etc.\n  will be substituted with string that matcher the corresponding\n  parenthesized group in pattern.\n  If you wish your replacement string to be used literary,\n  use `(escape-regexp replacement)`.\n  Example:\n    (replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n    ;; => \"lmostAay igPay atinLay\"\n  "}, slugify {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 404, :column 7, :end-line 404, :end-column 14, :arglists (quote ([s])), :doc "Transform text into a URL slug."}, :name cuerdas.core/slugify, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Transform text into a URL slug."}, escape-regexp {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 199, :column 7, :end-line 199, :end-column 20, :arglists (quote ([s])), :doc "Escapes characters in the string that are not safe\n   to use in a RegExp."}, :name cuerdas.core/escape-regexp, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 20, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Escapes characters in the string that are not safe\n   to use in a RegExp."}, humanize {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 450, :column 7, :end-line 450, :end-column 15, :arglists (quote ([s])), :doc "Converts an underscored, camelized, or\n  dasherized string into a humanized one."}, :name cuerdas.core/humanize, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts an underscored, camelized, or\n  dasherized string into a humanized one."}, underscored {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 438, :column 7, :end-line 438, :end-column 18, :arglists (quote ([s])), :doc "Converts a camelized or dasherized string\n  into an underscored one."}, :name cuerdas.core/underscored, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 438, :end-line 438, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts a camelized or dasherized string\n  into an underscored one."}, dasherize {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 393, :column 7, :end-line 393, :end-column 16, :arglists (quote ([s])), :doc "Converts a underscored or camelized string\n  into an dasherized one."}, :name cuerdas.core/dasherize, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts a underscored or camelized string\n  into an dasherized one."}, camelize {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 429, :column 7, :end-line 429, :end-column 15, :arglists (quote ([s])), :doc "Converts a string from selector-case to camelCase."}, :name cuerdas.core/camelize, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts a string from selector-case to camelCase."}, unquote {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 387, :column 7, :end-line 387, :end-column 14, :arglists (quote ([s] [s qchar])), :doc "Unquote a string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}}, :name cuerdas.core/unquote, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}, :method-params ([s] [s qchar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s qchar]), :doc "Unquote a string."}, parse-float {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 509, :column 10, :end-line 509, :end-column 21, :arglists (quote ([s] [s precision])), :doc "Return the float value, wraps parseFloat.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}}, :name cuerdas.core/parse-float, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 21, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}, :method-params ([s] [s precision]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 509, :end-line 509, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s precision]), :doc "Return the float value, wraps parseFloat."}, words {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 316, :column 7, :end-line 316, :end-column 12, :arglists (quote ([s word-re] [s])), :doc "Returns a vector of the words in the string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s word-re] [s]), :arglists ([s word-re] [s]), :arglists-meta (nil nil)}}, :name cuerdas.core/words, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s word-re] [s]), :arglists ([s word-re] [s]), :arglists-meta (nil nil)}, :method-params ([s word-re] [s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 2, :fn-var true, :arglists ([s word-re] [s]), :doc "Returns a vector of the words in the string."}, unlines {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 309, :column 7, :end-line 309, :end-column 14, :arglists (quote ([s])), :doc "Returns a new string joining a list of strings with a newline char (\\n)."}, :name cuerdas.core/unlines, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns a new string joining a list of strings with a newline char (\\n)."}, substr-between {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 664, :column 7, :end-line 664, :end-column 21, :arglists (quote ([s prefix suffix])), :doc "Find string that is nested in between two strings. Return first match"}, :name cuerdas.core/substr-between, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 21, :method-params ([s prefix suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 664, :end-line 664, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s prefix suffix])), :doc "Find string that is nested in between two strings. Return first match"}, lines {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 304, :column 7, :end-line 304, :end-column 12, :arglists (quote ([s])), :doc "Return a list of the lines in the string."}, :name cuerdas.core/lines, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return a list of the lines in the string."}, to-bool {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 552, :column 7, :end-line 552, :end-column 14, :arglists (quote ([s])), :doc "Returns true for 1/on/true/yes string values (case-insensitive),\n  false otherwise."}, :name cuerdas.core/to-bool, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 552, :end-line 552, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Returns true for 1/on/true/yes string values (case-insensitive),\n  false otherwise."}, char-range-check {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 116, :column 8, :end-line 116, :end-column 24, :private true, :arglists (quote ([re]))}, :private true, :name cuerdas.core/char-range-check, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 24, :method-params ([re]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([re]))}, strip-tags-impl {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 628, :column 8, :end-line 628, :end-column 23, :private true, :arglists (quote ([s tags mappings]))}, :private true, :name cuerdas.core/strip-tags-impl, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 23, :method-params ([s tags mappings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 628, :end-line 628, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s tags mappings]))}, strip-suffix {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 182, :column 7, :end-line 182, :end-column 19, :arglists (quote ([s prefix])), :doc "Strip suffix in more efficient way."}, :name cuerdas.core/strip-suffix, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Strip suffix in more efficient way."}, indexed-format {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 337, :column 8, :end-line 337, :end-column 22, :private true, :arglists (quote ([s params]))}, :private true, :name cuerdas.core/indexed-format, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 22, :method-params ([s params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 337, :end-line 337, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s params]))}, strip-prefix {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 175, :column 7, :end-line 175, :end-column 19, :arglists (quote ([s prefix])), :doc "Strip prefix in more efficient way."}, :name cuerdas.core/strip-prefix, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 19, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :doc "Strip prefix in more efficient way."}, unsurround {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 370, :column 7, :end-line 370, :end-column 17, :arglists (quote ([s surrounding])), :doc "Unsurround a string surrounded by another."}, :name cuerdas.core/unsurround, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 17, :method-params ([s surrounding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s surrounding])), :doc "Unsurround a string surrounded by another."}, interpolate-format {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 325, :column 8, :end-line 325, :end-column 26, :private true, :arglists (quote ([s params]))}, :private true, :name cuerdas.core/interpolate-format, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 26, :method-params ([s params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s params]))}, strip-newlines {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 265, :column 7, :end-line 265, :end-column 21, :arglists (quote ([s])), :doc "Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."}, :name cuerdas.core/strip-newlines, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Takes a string and replaces newlines with a space.\n  Multiple lines are replaced with a single space."}, surround {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 364, :column 7, :end-line 364, :end-column 15, :arglists (quote ([s wrap])), :doc "Surround a string with another string."}, :name cuerdas.core/surround, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 15, :method-params ([s wrap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s wrap])), :doc "Surround a string with another string."}, alpha-numeric? {:name cuerdas.core/alpha-numeric?, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 131, :column 1, :end-line 131, :end-column 20, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 131, :column 6, :end-line 131, :end-column 20}, :doc "Checks if a string contains only alphanumeric characters."}, regexp {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 52, :column 11, :end-line 52, :end-column 17, :private true, :arglists (quote ([s] [s flags])), :doc "Build or derive regexp instance.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s flags]), :arglists ([s] [s flags]), :arglists-meta (nil nil)}}, :private true, :name cuerdas.core/regexp, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s flags]), :arglists ([s] [s flags]), :arglists-meta (nil nil)}, :method-params ([s] [s flags]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s flags]), :doc "Build or derive regexp instance."}, one-of? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 547, :column 7, :end-line 547, :end-column 14, :arglists (quote ([coll s])), :doc "Returns true if s can be found in coll."}, :name cuerdas.core/one-of?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 14, :method-params ([coll s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll s])), :doc "Returns true if s can be found in coll."}, strip-tags {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 647, :column 7, :end-line 647, :end-column 17, :arglists (quote ([s] [s tags] [s tags mapping])), :doc "Remove html tags from string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s tags] [s tags mapping]), :arglists ([s] [s tags] [s tags mapping]), :arglists-meta (nil nil nil)}}, :name cuerdas.core/strip-tags, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s tags] [s tags mapping]), :arglists ([s] [s tags] [s tags mapping]), :arglists-meta (nil nil nil)}, :method-params ([s] [s tags] [s tags mapping]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 647, :end-line 647, :max-fixed-arity 3, :fn-var true, :arglists ([s] [s tags] [s tags mapping]), :doc "Remove html tags from string."}, split {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 271, :column 7, :end-line 271, :end-column 12, :arglists (quote ([s] [s sep] [s sep num])), :doc "Splits a string on a separator a limited\n  number of times. The separator can be a string\n  or Pattern (clj) / RegExp (cljs) instance.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s sep] [s sep num]), :arglists ([s] [s sep] [s sep num]), :arglists-meta (nil nil nil)}}, :name cuerdas.core/split, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s] [s sep] [s sep num]), :arglists ([s] [s sep] [s sep num]), :arglists-meta (nil nil nil)}, :method-params ([s] [s sep] [s sep num]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 3, :fn-var true, :arglists ([s] [s sep] [s sep num]), :doc "Splits a string on a separator a limited\n  number of times. The separator can be a string\n  or Pattern (clj) / RegExp (cljs) instance."}, quote {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 382, :column 7, :end-line 382, :end-column 12, :arglists (quote ([s] [s qchar])), :doc "Quotes a string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}}, :name cuerdas.core/quote, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s qchar]), :arglists ([s] [s qchar]), :arglists-meta (nil nil)}, :method-params ([s] [s qchar]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s qchar]), :doc "Quotes a string."}, chars {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 297, :column 7, :end-line 297, :end-column 12, :arglists (quote ([s])), :doc "Split a string in a seq of chars."}, :name cuerdas.core/chars, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Split a string in a seq of chars."}, pad {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 558, :column 7, :end-line 558, :end-column 10, :arglists (quote ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]])), :doc "Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :arglists-meta (nil)}}, :name cuerdas.core/pad, :variadic true, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :arglists-meta (nil)}, :method-params [(s [{:keys [length padding type], :or {length 0, padding " ", type :left}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 558, :end-line 558, :max-fixed-arity 1, :fn-var true, :arglists ([s & [{:keys [length padding type], :or {length 0, padding " ", type :left}}]]), :doc "Pads the str with characters until the total string\n  length is equal to the passed length parameter. By\n  default, pads on the left with the space char."}, unescape-html {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 619, :column 10, :end-line 619, :end-column 23, :arglists (quote ([s])), :doc "Converts entity characters to HTML equivalents."}, :name cuerdas.core/unescape-html, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 23, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 619, :end-line 619, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts entity characters to HTML equivalents."}, parse-int {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 529, :column 10, :end-line 529, :end-column 19, :arglists (quote ([s])), :doc "Return the number value in integer form."}, :name cuerdas.core/parse-int, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 19, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 529, :end-line 529, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Return the number value in integer form."}, slice {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 31, :column 7, :end-line 31, :end-column 12, :arglists (quote ([s begin] [s begin end])), :doc "Extracts a section of a string and returns a new string.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s begin] [s begin end]), :arglists ([s begin] [s begin end]), :arglists-meta (nil nil)}}, :name cuerdas.core/slice, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s begin] [s begin end]), :arglists ([s begin] [s begin end]), :arglists-meta (nil nil)}, :method-params ([s begin] [s begin end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists ([s begin] [s begin end]), :doc "Extracts a section of a string and returns a new string."}, reversed-html-escape-chars {:name cuerdas.core/reversed-html-escape-chars, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 591, :column 4, :end-line 591, :end-column 35, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 591, :column 9, :end-line 591, :end-column 35}}, escape-html {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 597, :column 10, :end-line 597, :end-column 21, :arglists (quote ([s]))}, :name cuerdas.core/escape-html, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 21, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 597, :end-line 597, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, prune {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 245, :column 7, :end-line 245, :end-column 12, :arglists (quote ([s num] [s num subs])), :doc "Truncates a string to a certain length and adds '...'\n  if necessary.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s num] [s num subs]), :arglists ([s num] [s num subs]), :arglists-meta (nil nil)}}, :name cuerdas.core/prune, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s num] [s num subs]), :arglists ([s num] [s num subs]), :arglists-meta (nil nil)}, :method-params ([s num] [s num subs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 3, :fn-var true, :arglists ([s num] [s num subs]), :doc "Truncates a string to a certain length and adds '...'\n  if necessary."}, lower {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 92, :column 7, :end-line 92, :end-column 12, :arglists (quote ([s])), :doc "Converts string to all lower-case."}, :name cuerdas.core/lower, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 12, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Converts string to all lower-case."}, endswith? {:name cuerdas.core/endswith?, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 90, :column 1, :end-line 90, :end-column 15, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 90, :column 6, :end-line 90, :end-column 15}}, trim {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 138, :column 7, :end-line 138, :end-column 11, :arglists (quote ([s] [s chs])), :doc "Removes whitespace or specified characters\n  from both ends of string.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}}, :name cuerdas.core/trim, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s chs]), :arglists ([s] [s chs]), :arglists-meta (nil nil)}, :method-params ([s] [s chs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s chs]), :doc "Removes whitespace or specified characters\n  from both ends of string."}, repeat {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 191, :column 7, :end-line 191, :end-column 13, :arglists (quote ([s] [s n])), :doc "Repeats string n times.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s n]), :arglists ([s] [s n]), :arglists-meta (nil nil)}}, :name cuerdas.core/repeat, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s n]), :arglists ([s] [s n]), :arglists-meta (nil nil)}, :method-params ([s] [s n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s n]), :doc "Repeats string n times."}, strip {:name cuerdas.core/strip, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 171, :column 1, :end-line 171, :end-column 11, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 171, :column 6, :end-line 171, :end-column 11}}, blank? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 104, :column 7, :end-line 104, :end-column 13, :arglists (quote ([s])), :doc "Checks if a string is empty or contains only whitespace."}, :name cuerdas.core/blank?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 13, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Checks if a string is empty or contains only whitespace."}, parse-number {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :line 494, :column 10, :end-line 494, :end-column 22, :arglists (quote ([s] [s precision])), :doc "General purpose function for parse number like\n  string to number. It works with both integers\n  and floats.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}}, :name cuerdas.core/parse-number, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/qmy/-wutanx/index.html.out/cuerdas/core.cljc", :end-column 22, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [s precision]), :arglists ([s] [s precision]), :arglists-meta (nil nil)}, :method-params ([s] [s precision]), :protocol-impl nil, :arglists-meta (nil nil), :column 4, :line 494, :end-line 494, :max-fixed-arity 2, :fn-var true, :arglists ([s] [s precision]), :doc "General purpose function for parse number like\n  string to number. It works with both integers\n  and floats."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :type :padding :length :right :both :left}, :order [:else :length :padding :type :left :right :both]}, :doc nil}