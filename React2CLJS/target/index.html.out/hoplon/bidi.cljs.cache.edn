;; Analyzed by ClojureScript 1.7.228
{:use-macros {with-let javelin.core, mx2 javelin.core, dosync javelin.core, cell= javelin.core, set-cell!= javelin.core, text hoplon.core, elem+ hoplon.core, prop-cell javelin.core, cache-key hoplon.core, with-timeout hoplon.core, cell-doseq javelin.core, defelem+ hoplon.core, defc javelin.core, when-tpl hoplon.core, cell-let-1 javelin.core, static hoplon.core, defc= javelin.core, sexp hoplon.core, macroexpand-all javelin.core, defelem hoplon.core, elem hoplon.core, def-values hoplon.core, if-tpl hoplon.core, mx javelin.core, cond-tpl hoplon.core, with-page-load hoplon.core, for-tpl hoplon.core, with-dom hoplon.core, case-tpl hoplon.core, loop-tpl hoplon.core, with-interval hoplon.core, cell-let javelin.core, with-init! hoplon.core}, :excludes #{}, :name hoplon.bidi, :imports nil, :requires {bidi.bidi bidi.bidi, schema.core schema.core, javelin.core javelin.core, bidi bidi.bidi, schema schema.core, hoplon.jquery hoplon.jquery, hoplon.core hoplon.core, bschema bidi.schema, s cuerdas.core, bidi.schema bidi.schema, cuerdas.core cuerdas.core}, :uses {form hoplon.core, audio hoplon.core, input hoplon.core, menuitem hoplon.core, hgroup hoplon.core, do! hoplon.core, timeout hoplon.core, $text hoplon.core, base hoplon.core, h1 hoplon.core, set-attributes! hoplon.core, embed hoplon.core, ->Cell javelin.core, shadow hoplon.core, h3 hoplon.core, body hoplon.core, input? javelin.core, keygen hoplon.core, progress hoplon.core, main hoplon.core, cite hoplon.core, cell javelin.core, on-page-load hoplon.core, i hoplon.core, p hoplon.core, nav hoplon.core, ruby hoplon.core, check-val! hoplon.jquery, a hoplon.core, menu hoplon.core, blockquote hoplon.core, img hoplon.core, cell? javelin.core, destroy-cell! javelin.core, $comment hoplon.core, span hoplon.core, track hoplon.core, data hoplon.core, u hoplon.core, dl hoplon.core, select hoplon.core, html hoplon.core, thead hoplon.core, del hoplon.core, fieldset hoplon.core, aside hoplon.core, figure hoplon.core, figcaption hoplon.core, q hoplon.core, on! hoplon.core, bdi hoplon.core, append-child! hoplon.core, video hoplon.core, address hoplon.core, caption hoplon.core, dd hoplon.core, rp hoplon.core, lift javelin.core, hr hoplon.core, tbody hoplon.core, table hoplon.core, html-var hoplon.core, add-initfn! hoplon.core, pre hoplon.core, ul hoplon.core, lens? javelin.core, replace-child! hoplon.core, html-time hoplon.core, set-formula! javelin.core, html-map hoplon.core, sup hoplon.core, dfn hoplon.core, sub hoplon.core, mark hoplon.core, script hoplon.core, button hoplon.core, wbr hoplon.core, insert-before! hoplon.core, strong hoplon.core, cell-doseq* javelin.core, li hoplon.core, dt hoplon.core, rtc hoplon.core, td hoplon.core, tr hoplon.core, deref* javelin.core, section hoplon.core, th hoplon.core, optgroup hoplon.core, bust-cache hoplon.core, iframe hoplon.core, remove-child! hoplon.core, legend hoplon.core, em hoplon.core, kbd hoplon.core, spliced hoplon.core, html-object hoplon.core, article hoplon.core, abbr hoplon.core, template hoplon.core, multicol hoplon.core, prerendering? hoplon.core, set-cell! javelin.core, <!-- hoplon.core, lens javelin.core, source hoplon.core, output hoplon.core, formula? javelin.core, set-styles! hoplon.core, route-cell hoplon.core, header hoplon.core, datalist hoplon.core, tfoot hoplon.core, s hoplon.core, ins hoplon.core, footer hoplon.core, title hoplon.core, h5 hoplon.core, canvas hoplon.core, param hoplon.core, div hoplon.core, option hoplon.core, summary hoplon.core, samp hoplon.core, small hoplon.core, style hoplon.core, textarea hoplon.core, loop-tpl* hoplon.core, h4 hoplon.core, head hoplon.core, alts! javelin.core, ol hoplon.core, details hoplon.core, col hoplon.core, label hoplon.core, picture hoplon.core, rt hoplon.core, when-dom hoplon.core, h6 hoplon.core, link hoplon.core, page-load hoplon.core, colgroup hoplon.core, meter hoplon.core, html-meta hoplon.core, static-elements hoplon.core, text-val! hoplon.jquery, bdo hoplon.core, --> hoplon.core, dosync* javelin.core, b hoplon.core, code hoplon.core, cell-map javelin.core, dialog hoplon.core, noframes hoplon.core, do-watch hoplon.core, noscript hoplon.core, safe-nth hoplon.core, h2 hoplon.core, area hoplon.core, br hoplon.core, formula javelin.core}, :defs {mkroute {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 41, :column 7, :end-line 41, :end-column 14, :arglists (quote ([routes & routeopts])), :doc "Generate a valid route. (includes '#' character)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(routes routeopts)], :arglists ([routes & routeopts]), :arglists-meta (nil)}}, :name hoplon.bidi/mkroute, :variadic true, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(routes routeopts)], :arglists ([routes & routeopts]), :arglists-meta (nil)}, :method-params [(routes routeopts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists ([routes & routeopts]), :doc "Generate a valid route. (includes '#' character)"}, route! {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 46, :column 7, :end-line 46, :end-column 13, :arglists (quote ([routes & routeopts])), :doc "Change URL hash, does not reload the page.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(routes routeopts)], :arglists ([routes & routeopts]), :arglists-meta (nil)}}, :name hoplon.bidi/route!, :variadic true, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(routes routeopts)], :arglists ([routes & routeopts]), :arglists-meta (nil)}, :method-params [(routes routeopts)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([routes & routeopts]), :doc "Change URL hash, does not reload the page."}, route? {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([routes handler])), :doc "Takes `routes` and `handler`, returns formula cell.\n   Formula cell is true if `route` is currently active."}, :name hoplon.bidi/route?, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 13, :method-params ([routes handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([routes handler])), :doc "Takes `routes` and `handler`, returns formula cell.\n   Formula cell is true if `route` is currently active."}, validate {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([routes])), :doc "Validate `routes` against bidi schema."}, :name hoplon.bidi/validate, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 15, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes])), :doc "Validate `routes` against bidi schema."}, *route* {:name hoplon.bidi/*route*, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 9, :column 1, :end-line 9, :end-column 23, :dynamic true, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 9, :column 16, :end-line 9, :end-column 23, :dynamic true}}, route {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([routes])), :doc "Takes `routes`, returns a formula cell with the current route handler."}, :name hoplon.bidi/route, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 12, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes])), :doc "Takes `routes`, returns a formula cell with the current route handler."}, wrap-route-params {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 18, :column 8, :end-line 18, :end-column 25, :private true, :arglists (quote ([routes routec])), :doc "Takes `routes` and a (route-cell).\n   Returns formula cell containing current route params."}, :private true, :name hoplon.bidi/wrap-route-params, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 25, :method-params ([routes routec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([routes routec])), :doc "Takes `routes` and a (route-cell).\n   Returns formula cell containing current route params."}, route-params {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 30, :column 7, :end-line 30, :end-column 19, :arglists (quote ([routes])), :doc "Takes `routes`, returns a formula cell with the current route params."}, :name hoplon.bidi/route-params, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 19, :method-params ([routes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([routes])), :doc "Takes `routes`, returns a formula cell with the current route params."}, match-route {:name hoplon.bidi/match-route, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 7, :column 6, :end-line 7, :end-column 17}}, wrap-route {:protocol-inline nil, :meta {:file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :line 11, :column 8, :end-line 11, :end-column 18, :private true, :arglists (quote ([routes routec])), :doc "Takes `routes` and a (route-cell).\n   Returns formula cell containing current matching handler."}, :private true, :name hoplon.bidi/wrap-route, :variadic false, :file "/Users/matt/.boot/cache/tmp/Users/matt/Projects/degree9/FreeCodeCamp/React2CLJS/sri/62mkia/hoplon/bidi.cljs", :end-column 18, :method-params ([routes routec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([routes routec])), :doc "Takes `routes` and a (route-cell).\n   Returns formula cell containing current matching handler."}}, :require-macros {javelin.core javelin.core, hoplon.core hoplon.core, schema schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{:route-params :handler}, :order [:handler :route-params]}, :doc nil}